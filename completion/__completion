current_context() {
  if [[ -z "${KCTX}" ]]
  then
    kubectl config current-context
  else
    echo "${KCTX}"
  fi
}

current_namespace() {
  if [[ -z "${KNS}" ]]
  then
    namespace="$(kubectl config view -o=jsonpath="{.contexts[?(@.name==\"$(current_context)\")].context.namespace}")"
  else
    namespace=${KNS}
  fi
  if [[ -z "${namespace}" ]]; then
    echo "default"
  else
    echo "${namespace}"
  fi
}
__pods ()
{
  # pointer to current completion word.
  local cur

  # array variable storing the possible completions.
  COMPREPLY=()
  cur=${COMP_WORDS[COMP_CWORD]}
  namespaces=$(kubectl get pod --context=$(current_context) -n $(current_namespace)|sed '1d'|awk '{print $1}')

  COMPREPLY=( $( compgen -W "$namespaces" -- $cur ) )

  case "$cur" in
    -*)
    # generate the completion matches and load them into $COMPREPLY array.
    COMPREPLY=( $( compgen -W '-h -s' -- $cur ) );;
  esac

  return 0
}

__namespaces ()
{
  # pointer to current completion word.
  local cur

  # array variable storing the possible completions.
  COMPREPLY=()
  cur=${COMP_WORDS[COMP_CWORD]}
  namespaces=$(kubectl get ns --context=$(current_context) |sed '1d'|awk '{print $1}')

  COMPREPLY=( $( compgen -W "$namespaces" -- $cur ) )

  case "$cur" in
    -*)
    # generate the completion matches and load them into $COMPREPLY array.
    COMPREPLY=( $( compgen -W '-h -s' -- $cur ) );;
  esac

  return 0
}

__contexts ()
{
  # pointer to current completion word.
  local cur

  # array variable storing the possible completions.
  COMPREPLY=()
  cur=${COMP_WORDS[COMP_CWORD]}
  contexts=$(kubectl config get-contexts |sed -e "s/\*//"|sed '1d'|awk '{print $1}')

  COMPREPLY=( $( compgen -W "$contexts" -- $cur ) )

  case "$cur" in
    -*)
    # generate the completion matches and load them into $COMPREPLY array.
    COMPREPLY=( $( compgen -W '-h -s' -- $cur ) );;
  esac

  return 0
}

__nodes ()
{
  # pointer to current completion word.
  local cur

  # array variable storing the possible completions.
  COMPREPLY=()
  cur=${COMP_WORDS[COMP_CWORD]}
  ips=$(kubectl get nodes --context=$(current_context) -o json | jq -r '.items[].status.addresses[].address' | paste - - - | cut -f 1)

  COMPREPLY=( $( compgen -W "$ips" -- $cur ) )

  case "$cur" in
    -*)
    # generate the completion matches and load them into $COMPREPLY array.
    COMPREPLY=( $( compgen -W '-h -s' -- $cur ) );;
  esac

  return 0
}

# apply autocompletions
complete -F __pods klogs kexec kcopy kpod
complete -F __namespaces kns
complete -F __contexts kctx

# remove autocompletion cache files e.g. .zcompdump after making changes