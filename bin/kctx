#!/bin/bash

# Kubernetes Tools - Copyright (C) 2017 Shawn Wang
# https://github.com/shawnxlw/kubernetes-tools
#
# You may use, distribute or modify this software under the terms of the MIT license.

source __common
YQ=${YQ:-"yq-go"}
show_context() {
  local default_context
  local highlight
  default_context=$(kubectl config current-context)

  if [[ -n "${KUBECONFIG}" ]]
  then
    printf "KUBECONFIG:      \033[33;1m${KUBECONFIG}\033[0m\n"
  fi
  echo -e "Default Context: \"${default_context}\""
  if [[ -n "${KCTX}" ]] 
  then
    echo -e "Current Context: \"${KCTX}\""
    active_context=${KCTX}
  else
    active_context=${default_context}
  fi

  highlight=$(printf "\033[32m${active_context}\033[0m")

  if [ "${short_output}" == "brief" ]
  then
    return 0
  fi
  echo ""
  echo "All Contexts:"
  if [ -n "$(command -v ${YQ})" ]
  then
    post_process="${YQ} -I 4 -P eval . -"
    sed_cmd="s/^${active_context}\\:/${highlight}:/"
  else
    post_process="cat"
    sed_cmd="s/\\(\"\\)${active_context}\\(\"\\)/\\1${highlight}\\2/"
  fi
  if [ "${short_output}" == "true" ]
  then
    jq_command='.contexts[] | .name'
    post_process="cat"
    sed_cmd="s/^${active_context}\$/${highlight}/"
  else
    jq_command='[.contexts[] |  { "key": .name, "value": { "cluster": .context.cluster, "user": .context.user, "namespace": .context.namespace}}]|from_entries'
  fi
  if [ -n "$(command -v jq)" ]
  then
    kubectl config view -o json \
     | jq -rM "${jq_command}" \
     | $post_process \
     | sed $sed_cmd
  else
    kubectl config get-contexts | sed "s/\\(\\*[[:space:]]\\+\\)${active_context}\\([[:space:]]\\)/\\1${highlight}\\2/"
  fi
}

switch_context() {
	echo "Switching from \"$(kubectl config current-context)\" to \"$1\""
	kubectl config use-context $1
	echo "Current Context: \"$(kubectl config current-context)\""
  exit 0
}

# sohw help
show_help() {
  echo -e $__title
  echo
  echo -e "- List current and all contexts: ${__style_underlined}kctx${__style_end}"
  echo -e "- Switch to specified [context]: ${__style_underlined}kctx [context]\n${__style_end}"
}

# parse arguments
short_output="true"
while [ "$1" != "" ]; do
  case $1 in
    -l | --long ) shift
      short_output="false"
      ;;
    -s | --short ) shift
      short_output="brief"
      ;;
    -c | --context ) shift
      switch_context $1
      ;;
    -h | --help ) shift
      show_help
      exit 0
      ;;
    * ) switch_context $1
  esac
  shift
done

# show current context if no argument specified
if [ $# -eq 0 ]; then show_context; fi
